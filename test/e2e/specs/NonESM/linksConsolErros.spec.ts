import { ConsoleMessage, expect } from '@playwright/test';
import { vpTest } from '../../fixtures/vpTest';
import { LINKS } from '../../testData/pageLinksData';
import { waitForPageToLoadWithTimeout } from '../../src/helpers/waitForPageToLoadWithTimeout';
import { validatePageErrors } from '../../src/helpers/validatePageErrors';
import { ExampleLinkName } from '../../testData/ExampleLinkNames';

/**
 * Console error test generated by LINKS object array data.
 */
for (const link of LINKS) {
    vpTest(`Test console errors on link ${link.name}`, async ({ page, consoleErrors, pomPages }) => {
        vpTest.skip(link.name === 'Adaptive Streaming', 'Flaky on CI');
        await pomPages.mainPage.clickLinkByName(link.name);
        await waitForPageToLoadWithTimeout(page, 5000);
        expect(page.url()).toContain(link.endpoint);
        handleCommonBrowsersErrors(link.name, consoleErrors);
    });
}

/**
 * Testing number of links in page.
 */
vpTest('Link count test', async ({ page }) => {
    const expectedNumberOfLinks = 37;
    const numberOfLinks = await page.getByRole('link').count();
    expect(numberOfLinks).toBe(expectedNumberOfLinks);
});

/**
 * Helper function to handle common browser errors.
 */
function handleCommonBrowsersErrors(linkName: ExampleLinkName, consoleErrors: ConsoleMessage[]) {
    switch (linkName) {
        case ExampleLinkName.CustomErrors:
            validatePageErrors(
                consoleErrors,
                ['(CODE:999 undefined) My custom error message'],
                ['No compatible source was found for this media', 'Video cannot be played Public ID snow_horses not found', 'the server responded with a status of 404', 'Cannot read properties of undefined']
            );
            break;
        case ExampleLinkName.DebugMode:
            validatePageErrors(consoleErrors, ['invalid player configuration', `cloudinary video player: \'fluid\' should be a boolean`], []);
            break;
        case ExampleLinkName.VASTAndVPAIDSupport:
            validatePageErrors(consoleErrors, ['The Cross-Origin-Opener-Policy header'], ["Blocked script execution in 'about:blank' because the document's frame is sandboxed and the 'allow-scripts' permission is not set"]);
            break;
        default:
            expect(consoleErrors, `The following unexpected console errors were found: ${JSON.stringify(consoleErrors)}`).toHaveLength(0);
    }
}
