import { ConsoleMessage, expect, Page } from '@playwright/test';
import { vpTest } from '../fixtures/vpTest';
import { ESM_LINKS } from '../testData/esmPageLinksData';
import { waitForPageToLoadWithTimeout } from '../src/helpers/waitForPageToLoadWithTimeout';
import { validatePageErrors } from '../src/helpers/validatePageErrors';
import { ExampleLinkType } from '../types/exampleLinkType';

const EDGE_ESM_URL = 'https://cld-vp-esm-pages.netlify.app/';
// On PR level it will use the preview deploy URL and locally it will use the latest EDGE.
const ESM_URL = process.env.PREVIEW_URL || EDGE_ESM_URL;
// Flag to indicate if the deploy preview URL is ready
let PREVIEW_URL_LOADED = false;

/**
 * Console error test generated by LINKS object array data.
 */
for (const link of ESM_LINKS) {
    vpTest(`Test console errors on link ${link.name}`, async ({ page, consoleErrors, vpExamples }) => {
        vpTest.skip(link.name === 'Adaptive Streaming', 'Flaky on CI');
        //Wait for deploy URL to be available if PREVIEW_URL is set, and it is not available yet
        if (process.env.PREVIEW_URL && !PREVIEW_URL_LOADED) {
            await waitForDeployPreviewUrl(link, page);
        }
        await page.goto(ESM_URL);
        await vpExamples.clickLinkByName(link.name);
        await waitForPageToLoadWithTimeout(page, 5000);
        expect(page.url()).toContain(link.endpoint);
        handleCommonEsmBrowsersErrors(link.name, consoleErrors);
    });
}

/**
 * Testing number of links in page.
 */
vpTest('ESM page Link count test', async ({ page }) => {
    await page.goto(ESM_URL);
    const expectedNumberOfLinks = 32;
    const numberOfLinks = await page.getByRole('link').count();
    expect(numberOfLinks).toBe(expectedNumberOfLinks);
});
/**
 * Helper function to handle common browser errors.
 */
function handleCommonEsmBrowsersErrors(linkName: string, consoleErrors: ConsoleMessage[]) {
    switch (linkName) {
        case 'Custom Errors':
            validatePageErrors(
                consoleErrors,
                ['(CODE:999 undefined) My custom error message'],
                ['No compatible source was found for this media', 'Video cannot be played Public ID snow_horses not found', 'the server responded with a status of 404', 'Cannot read properties of undefined']
            );
            break;
        case 'VAST & VPAID Support':
            validatePageErrors(consoleErrors, [], ["Blocked script execution in 'about:blank' because the document's frame is sandboxed and the 'allow-scripts' permission is not set", 'the server responded with a status of 404']);
            break;
        default:
            validatePageErrors(consoleErrors, [], ['the server responded with a status of 404']);
    }
}

/**
 * Waits for a deploy preview URL to become available by making repeated requests and check that link is visible.
 */
async function waitForDeployPreviewUrl(link: ExampleLinkType, page: Page): Promise<void> {
    console.log('Waiting for deploy preview to be ready...');
    await expect(async () => {
        await page.goto(process.env.PREVIEW_URL);
        const linkLocator = page.getByRole('link', { name: link.name, exact: true });
        await expect(linkLocator).toBeVisible({ timeout: 10000 });
        PREVIEW_URL_LOADED = true;
    }).toPass({ intervals: [1_000], timeout: 120000 });
}
